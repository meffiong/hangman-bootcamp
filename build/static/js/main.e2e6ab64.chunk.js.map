{"version":3,"sources":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Hangman","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nWrong","guessed","Set","answer","handleGuess","bind","assertThisInitialized","_this2","split","map","ltr","react_default","a","createElement","value","onClick","disabled","has","_this3","evt","target","setState","st","add","includes","src","imgages","alt","generateKeys","Component","defaultProps","maxWrong","img0","img1","img2","img3","img4","img5","img6","App","className","src_Hangman_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oXCUlCC,cAMF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAQ,EAAGC,QAAS,IAAIC,IAAOC,OAAQ,UAE3CX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IALLA,8EAQJ,IAAAe,EAAAZ,KAGV,MAFc,6BAECa,MAAM,IAAIC,IAAI,SAAAC,GAAG,OAC5BC,EAAAC,EAAAC,cAAA,UACIC,MAAOJ,EACPK,QAAWR,EAAKH,YAChBY,SAAYT,EAAKR,MAAME,QAAQgB,IAAIP,IAElCA,2CAKA,IAAAQ,EAAAvB,KAET,OAAOA,KAAKI,MAAMI,OAAOK,MAAM,IAAIC,IAAI,SAAAC,GAAG,OACtCQ,EAAKnB,MAAME,QAAQgB,IAAIP,GAAO,CAACA,OAAO,0CAIlCS,GACR,IAAIT,EAAMS,EAAIC,OAAON,MAErBnB,KAAK0B,SAAS,SAAAC,GAAE,MAAK,CACjBrB,QAASqB,EAAGrB,QAAQsB,IAAIb,GACxBV,OAAQsB,EAAGtB,QAAUsB,EAAGnB,OAAOqB,SAASd,GAAO,EAAI,uCAUvD,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKY,IAAK9B,KAAKJ,MAAMmC,QAAQ/B,KAAKI,MAAMC,QAAS2B,IAAI,kBACrDhB,EAAAC,EAAAC,cAAA,SAAIlB,KAAKiC,gBACTjB,EAAAC,EAAAC,cAAA,kBAvDMgB,aAAhBvC,EACKwC,aAAe,CAClBC,SAAU,EACVL,QAAS,CAACM,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,MA2DjChD,cC5DAiD,MARf,WACE,OACE5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAC4B,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2e6ab64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c80394c2.jpg\";","import React, { Component } from 'react'\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\n\nclass Hangman extends Component{\n    static defaultProps = {\n        maxWrong: 6,\n        imgages: [img0,img1,img2,img3,img4,img5,img6]\n    }\n\n    constructor(props){\n        super(props)\n        this.state = {\n            nWrong: 0, guessed: new Set(), answer: \"africa\"\n        }\n        this.handleGuess = this.handleGuess.bind(this)\n    }\n\n    generateKeys(){\n        let letters = \"abcdefghijklmnopqrstuvwxyz\"\n\n        return letters.split(\"\").map(ltr => (\n            <button\n                value={ltr}\n                onClick = {this.handleGuess}\n                disabled = {this.state.guessed.has(ltr)}\n            >\n                {ltr}\n            </button>\n        ));\n    }\n\n    guessedWord(){\n        //returning each individual letter\n        return this.state.answer.split(\"\").map(ltr => (\n            this.state.guessed.has(ltr) ? {ltr} : \"_\"\n        ));\n    }\n\n    handleGuess(evt){\n        let ltr = evt.target.value;\n\n        this.setState(st => ({\n            guessed: st.guessed.add(ltr),\n            nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n        }));\n    }\n\n    \n\n    \n\n    render(){\n\n        return(\n            <div>\n                <h1>Hangman</h1>\n                <img src={this.props.imgages[this.state.nWrong]} alt=\"hangman image\" />\n                <p>{this.generateKeys()}</p>\n                <p></p>\n            </div>\n        )\n    }\n\n}\n\nexport default Hangman","import React from 'react';\nimport Hangman from './Hangman'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}